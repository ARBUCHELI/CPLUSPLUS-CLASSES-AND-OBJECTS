# PROJECT
---------

* The Object of Your Affection
------------------------------
Your friend is building a new match-making service: The Object of Your Affection or OOYA for short (don’t worry, you still have time to convince them to change the name).

With your new understanding of C++ objects and classes, your friend thought you could build a pretty well-organized system of dating profiles.

Your first step? Build a Profile class that allows users to generate profile objects.

The Profile should store the following information:

	. User’s name

	. User’s age

	. User’s city

	. User’s country

	. User’s pronouns

	. User’s hobbies

And this is how users should be able to interact with their own profiles:

Create a new profile with some information
Add hobbies
View profile

	. Let’s get started!

* The attributes of a classy Profile:
-------------------------------------
1.
Tab over to profile.hpp and set up the skeleton of the Profile class.


Hint
For example, the class skeleton for Recipe would look like:

class Recipe {
 
}; // <-- don't forget this final semicolon!

2.
Add the following member attributes to Profile:

	. an std::string name

	. an int age

	. an std::string city

	. an std::string country

	. an std::string pronouns

	. an std::vector hobbies that will store std::string values

Since you’re using std::vector, make sure you include <vector> at the top of the file.


Hint
So far, profile.hpp should look like this:

#include <vector>
 
class Profile {
 
  std::string name;
  int age;
  std::string city;
  std::string country;
  std::string pronouns;
  std::vector<std::string> hobbies;
 
};

3.
Tab over to app.cpp:

	. Above main(), include the header file so that Profile is in scope.

	. Instantiate a new Profile object called sam. (Your friend Sam is looking for love.)

	. Try to give sam a name: "Sam Drakkila".

	. Then try to compile and execute.

Hint

To include a header file named sparkles.hpp:

#include "sparkles.hpp"

To instantiate a new Profile called sam and give it a name of "Sam Drakkila":

Profile sam;
sam.name = "Sam Drakkila";

To compile and execute throughout this project:

g++ app.cpp profile.cpp
./a.out

*Going public:
--------------
4.
Yikes, what was that error message all about? Something to do with Profile::name being private?

Oh that’s right! All the attributes in a class (including name) are automatically set to private. You need a way for users to set some basic profile information.

Inside Profile:

	. Add private above the attributes you’ve created.

	. Add a public section below.

Hint
So far, Profile should look like this:

class Profile {
private:
 
  std::string name;
  int age;
  std::string city;
  std::string country;
  std::string pronouns;
  std::vector<std::string> hobbies;
 
public:
 
};

5.
Under public in Profile, declare a constructor for Profile that allows you to set:

	. name

	. age

	. city

	. country

	. pronouns (give this a default value of "they/them" just in case it’s ever left blank)

Define the constructor in profile.cpp and assign the attributes the values passed in. (Don’t give pronouns a default value in the definition.)

Name each parameter something different than its corresponding attribute. For example, this will work:

population = new_population;

But this won’t:

population = population;

Hint
At this point, profile.hpp should look like this:

#include <vector>
 
class Profile {
private:
  std::string name;
  int age;
  std::string city;
  std::string country;
  std::string pronouns;
  std::vector<std::string> hobbies;
 
public:
  Profile(std::string new_name, int new_age, std::string new_city, std::string new_country, std::string new_pronouns = "they/them");
 
};

In profile.cpp, you should have something like this:

Profile::Profile(std::string new_name, int new_age, std::string new_city, std::string new_country, std::string new_pronouns)
  : name(new_name), age(new_age), city(new_city), country(new_country), pronouns(new_pronouns) {
 
}

6.
Time to test your code out!

Include <iostream> and profile.hpp at the top of profile.cpp. (Without these include statements, profile.cpp doesn’t know that the Profile class exists or what std::string is.)

If you assigned sam a name before, remove that line. Where sam is constructed, pass in the following information:

	. a name of "Sam Drakkila"

	. an age of 30

	. city and country of "New York" and "USA"

	. pronouns of "he/him"

Then go ahead and compile and execute your code.


Hint
To include a header file named sparkles.hpp:

#include "sparkles.hpp"

In main(), you should have:

Profile sam("Sam Drakkila", 30, "New York", "USA", "he/him");

To compile and execute throughout this project:

g++ app.cpp profile.cpp
./a.out

7.
Nice work! But how can you access profile information once it’s been added?

Time to add a .view_profile() method.

Declare .view_profile() under your public section of Profile with:

	. a return type of std::string

	. no parameters

In profile.cpp, add the method’s definition. The method should return a string that includes the profile information.


Hint
There are many ways to put the return value together. Here’s one way:

std::string Profile::view_profile() {
 
  std::string bio = "Name: " + name;
  bio += "\nAge: " + std::to_string(age);
  bio += "\nPronouns: " + pronouns;
 
  return bio;
 
}

8.
Test out the new method in main() on sam and print out the result.


Hint
In main():

Profile sam("Sam Drakkila", 30, "New York", "USA", "he/him");
 
std::cout << sam.view_profile();

To compile and execute throughout this project:

g++ app.cpp profile.cpp
./a.out
Hobbies:

9.
You still need to give users a way to add hobbies. In profile.hpp, declare a new public method .add_hobby() with:

	. no return value

	. one std::string parameter new_hobby

In profile.cpp, define .add_hobby(). In the method body, add new_hobby to hobbies.


Hint
You can use .push_back() to add an element to a vector.

In profile.cpp:

void Profile::add_hobby(std::string new_hobby) {
 
  hobbies.push_back(new_hobby);
 
}

10.
Great! Go back into .view_profile() and modify the method so that you display a profile’s hobbies.

(Remember, you can loop through hobbies to access each element.)


Hint
There are several ways of doing this. Here’s one solution:

std::string Profile::view_profile() {
 
  std::string bio = "Name: " + name;
  bio += "\nAge: " + std::to_string(age);
  bio += "\nPronouns: " + pronouns;
  std::string hobby_string = "Hobbies:\n";
 
  for (std::string hobby : hobbies) {
 
    hobby_string += " - " + hobby + "\n";
 
  }
 
  return bio + "\n" + hobby_string;
 
}

11.
Before you show this all to your friend, be sure to test your work.

Above where you print sam‘s profile information out, add some hobbies to sam:

	. “listening to audiobooks and podcasts”

	. “playing rec sports like bowling and kickball”

	. “writing a speculative fiction novel”

	. “reading advice columns”

Now compile and execute your code!


Hint
For example:

sam.add_hobby("listening to audiobooks and podcasts");
To compile and execute:

g++ app.cpp profile.cpp
./a.out
Tweaks:

12.
Your friend is super impressed with the Profile class you’ve created!

Sample solution(s):

	. The Object Of Your Affection
Build more profiles

How would you make the Profile class to make it even better? Remix the project and make a Pull Request to the Learn C++ GitHub repo for a chance be featured in the course.